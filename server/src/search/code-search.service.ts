import { HybridSearchService, HybridSearchOptions } from "./hybrid-search.service";
import { SearchResult } from "./search-strategies";

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∫–æ–¥–æ–≤–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π
export const CODE_TECHNOLOGIES = {
  VUE: 'vue',
  NODE: 'node', 
  TYPESCRIPT: 'typescript',
  GRAPESJS: 'grapesjs'
} as const;

export type CodeTechnology = typeof CODE_TECHNOLOGIES[keyof typeof CODE_TECHNOLOGIES];

export interface CodeSearchOptions extends Omit<HybridSearchOptions, 'technology'> {
  technologies?: CodeTechnology[];
  codeType?: 'documentation' | 'issue' | 'example';
  language?: 'javascript' | 'typescript' | 'vue' | 'html' | 'css';
  skipTechnicalValidation?: boolean; // –û–ø—Ü—ñ—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
}

// –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º
export interface CodeSearchResult {
  results: SearchResult[];
  warning?: string;
  isTechnical: boolean;
  suggestions?: string[];
}

export class CodeSearchService {
  private hybridSearchService = new HybridSearchService();

  // –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É –ø–æ –∫–æ–¥—É –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
  async searchCode(query: string, options: CodeSearchOptions = {}): Promise<CodeSearchResult> {
    // –°–ø—Ä–æ—â–µ–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è - —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É –∑–∞–ø–∏—Ç—É
    if (query.trim().length < 2) {
      return {
        results: [],
        warning: '–ó–∞–ø–∏—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥—ñ—Ç—å –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π.',
        isTechnical: false,
        suggestions: ['–î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É']
      };
    }

    const {
      technologies = Object.values(CODE_TECHNOLOGIES),
      codeType,
      strategies = this.getCodeOptimizedStrategies(query),
      ensembleMethod = 'weighted_sum',
      limit = 10,
      skipTechnicalValidation = false
    } = options;

    console.log(`üîç Code Search: "${query}" in technologies: ${technologies.join(', ')}`);

    let searchResults: SearchResult[] = [];

    // –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞ —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–æ—à—É–∫
    if (technologies.length === 1) {
      searchResults = await this.hybridSearchService.search(query, {
        ...options,
        technology: technologies[0],
        type: codeType,
        strategies,
        ensembleMethod,
        limit
      });
    } else {
      // –ë–∞–≥–∞—Ç–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π –ø–æ—à—É–∫
      const technologyResults = await Promise.all(
        technologies.map(async tech => {
          const results = await this.hybridSearchService.search(query, {
            ...options,
            technology: tech,
            type: codeType,
            strategies,
            ensembleMethod,
            limit: Math.ceil(limit / technologies.length) + 2 // –¢—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑–º–∞—ó—Ç—Ç—è
          });

          return results.map(result => ({
            ...result,
            score: result.score * this.getTechnologyWeight(tech, query),
            matchDetails: {
              ...result.matchDetails,
              searchTechnology: tech
            }
          }));
        })
      );

      // –û–±'—î–¥–Ω—É—î–º–æ —Ç–∞ —Ä–∞–Ω–∂—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
      const allResults = technologyResults.flat();
      const uniqueResults = this.deduplicateResults(allResults);

      searchResults = uniqueResults
        .sort((a, b) => b.score - a.score)
        .slice(0, limit);
    }

    return {
      results: searchResults,
      isTechnical: true,
      warning: searchResults.length === 0 ? '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º' : undefined
    };
  }

  // –°–ø—Ä–æ—â–µ–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è - —Ç—ñ–ª—å–∫–∏ –±–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
  private validateTechnicalQuery(query: string): { 
    isTechnical: boolean; 
    warning?: string; 
    suggestions?: string[] 
  } {
    const trimmedQuery = query.trim();
    
    if (trimmedQuery.length < 2) {
      return {
        isTechnical: false,
        warning: '–ó–∞–ø–∏—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥—ñ—Ç—å –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π.',
        suggestions: ['–î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É']
      };
    }

    // –¢–µ–ø–µ—Ä –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ –≤–≤–∞–∂–∞—é—Ç—å—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ - –Ω–µ—Ö–∞–π AI –º–æ–¥–µ–ª—å –≤–∏—Ä—ñ—à—É—î
    return { isTechnical: true };
  }

  // –û–Ω–æ–≤–ª–µ–Ω—ñ –º–µ—Ç–æ–¥–∏ –∑ –Ω–æ–≤–∏–º —Ç–∏–ø–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
  async searchCodeDocumentation(query: string, options: Omit<CodeSearchOptions, 'codeType'> = {}): Promise<CodeSearchResult> {
    const result = await this.searchCode(query, {
      ...options,
      codeType: 'documentation',
      strategies: ['fulltext', 'bm25', 'rule_based']
    });

    if (!result.isTechnical) {
      return result;
    }

    return {
      ...result,
      warning: result.results.length === 0 ? '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º' : undefined
    };
  }

  async searchCodeIssues(query: string, options: Omit<CodeSearchOptions, 'codeType'> = {}): Promise<CodeSearchResult> {
    const result = await this.searchCode(query, {
      ...options,
      codeType: 'issue',
      strategies: ['rule_based', 'fuzzy', 'ngram']
    });

    if (!result.isTechnical) {
      return result;
    }

    return {
      ...result,
      warning: result.results.length === 0 ? '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ issues –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º' : undefined
    };
  }

  async searchAPI(query: string, options: CodeSearchOptions = {}): Promise<CodeSearchResult> {
    const apiTerms = ['api', 'method', 'function', 'property', 'interface'];
    const enhancedQuery = `${query} ${apiTerms.join(' ')}`;
    
    return this.searchCode(enhancedQuery, {
      ...options,
      codeType: 'documentation',
      strategies: ['bm25', 'rule_based', 'lexical']
    });
  }

  async searchByTechnology(technology: CodeTechnology, query: string, options: Omit<CodeSearchOptions, 'technologies'> = {}): Promise<CodeSearchResult> {
    if (!Object.values(CODE_TECHNOLOGIES).includes(technology)) {
      throw new Error(`Unsupported technology: ${technology}. Supported: ${Object.values(CODE_TECHNOLOGIES).join(', ')}`);
    }

    return this.searchCode(query, {
      ...options,
      technologies: [technology]
    });
  }

  async searchTroubleshooting(query: string, options: CodeSearchOptions = {}): Promise<CodeSearchResult> {
    const troubleshootingTerms = ['error', 'bug', 'issue', 'problem', 'fix', 'solution'];
    const enhancedQuery = query.toLowerCase().includes('error') || query.toLowerCase().includes('bug') 
      ? query 
      : `${query} ${troubleshootingTerms.slice(0, 2).join(' ')}`;

    return this.searchCode(enhancedQuery, {
      ...options,
      codeType: 'issue',
      strategies: ['rule_based', 'fuzzy', 'bm25'],
      ensembleMethod: 'vote'
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
  validateQuery(query: string): { 
    isTechnical: boolean; 
    warning?: string; 
    suggestions?: string[] 
  } {
    return this.validateTechnicalQuery(query);
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –¥–ª—è –∫–æ–¥—É
  getCodeOptimizedStrategies(query: string): string[] {
    const strategies: string[] = [];

    // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    if (query.length < 10) {
      strategies.push('lexical', 'fuzzy');
    }

    // –î–ª—è –¥–æ–≤–≥–∏—Ö –æ–ø–∏—Å–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    if (query.length > 20) {
      strategies.push('fulltext', 'bm25');
    }

    // –î–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏
    if (/\b(error|bug|issue|exception)\b/i.test(query)) {
      strategies.push('rule_based', 'ngram');
    }

    // –î–ª—è API –∑–∞–ø–∏—Ç—ñ–≤
    if (/\b(api|method|function|class)\b/i.test(query)) {
      strategies.push('bm25', 'lexical');
    }

    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è –∫–æ–¥—É
    if (strategies.length === 0) {
      strategies.push('bm25', 'rule_based');
    }

    return [...new Set(strategies)];
  }

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞–≥–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –≤—ñ–¥–Ω–æ—Å–Ω–æ –∑–∞–ø–∏—Ç—É
  private getTechnologyWeight(technology: CodeTechnology, query: string): number {
    const lowerQuery = query.toLowerCase();
    
    // –ë–∞–∑–æ–≤–∞ –≤–∞–≥–∞
    let weight = 1.0;
    
    // –ó–±—ñ–ª—å—à—É—î–º–æ –≤–∞–≥—É —è–∫—â–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è –∑–≥–∞–¥—É—î—Ç—å—Å—è –≤ –∑–∞–ø–∏—Ç—ñ
    if (lowerQuery.includes(technology)) {
      weight += 0.5;
    }

    // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π
    const techKeywords: Record<CodeTechnology, string[]> = {
      vue: ['component', 'directive', 'computed', 'watch', 'reactive', 'composition'],
      node: ['server', 'express', 'npm', 'module', 'require', 'async'],
      typescript: ['interface', 'type', 'generic', 'enum', 'decorator', 'strict'],
      grapesjs: ['editor', 'block', 'component', 'canvas', 'panel', 'trait']
    };

    const keywords = techKeywords[technology] || [];
    const matchingKeywords = keywords.filter(keyword => lowerQuery.includes(keyword));
    
    if (matchingKeywords.length > 0) {
      weight += matchingKeywords.length * 0.2;
    }

    return weight;
  }

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  private deduplicateResults(results: SearchResult[]): SearchResult[] {
    const seen = new Set<number>();
    const unique: SearchResult[] = [];

    for (const result of results) {
      if (!seen.has(result.document.id)) {
        seen.add(result.document.id);
        unique.push(result);
      } else {
        // –Ø–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç –≤–∂–µ —î, –æ–±'—î–¥–Ω—É—î–º–æ score
        const existingIndex = unique.findIndex(r => r.document.id === result.document.id);
        if (existingIndex !== -1) {
          const existing = unique[existingIndex];
          existing.score = Math.max(existing.score, result.score);
          
          // –û–±'—î–¥–Ω—É—î–º–æ matchDetails
          if (existing.matchDetails && result.matchDetails) {
            existing.matchDetails = {
              ...existing.matchDetails,
              ...result.matchDetails,
              combinedFrom: [
                ...(existing.matchDetails.combinedFrom || [existing.matchDetails.searchTechnology]),
                result.matchDetails.searchTechnology
              ].filter(Boolean)
            };
          }
        }
      }
    }

    return unique;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó
  getCodeTechnologies(): Array<{ value: CodeTechnology, label: string, description: string }> {
    return [
      {
        value: CODE_TECHNOLOGIES.VUE,
        label: 'Vue.js',
        description: 'Progressive JavaScript framework'
      },
      {
        value: CODE_TECHNOLOGIES.NODE,
        label: 'Node.js',
        description: 'JavaScript runtime environment'
      },
      {
        value: CODE_TECHNOLOGIES.TYPESCRIPT,
        label: 'TypeScript',
        description: 'Typed superset of JavaScript'
      },
      {
        value: CODE_TECHNOLOGIES.GRAPESJS,
        label: 'GrapesJS',
        description: 'Web Builder Framework'
      }
    ];
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ–¥–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É
  getCodeSearchRecommendations(query: string): string[] {
    const recommendations: string[] = [];
    const lowerQuery = query.toLowerCase();

    if (lowerQuery.includes('error') || lowerQuery.includes('bug')) {
      recommendations.push('–°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—à—É–∫ –≤ issues –∑ troubleshooting –∑–∞–ø–∏—Ç–æ–º');
    }

    if (lowerQuery.length < 5) {
      recommendations.push('–î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Ç–æ—á–Ω—ñ—à–æ–≥–æ –ø–æ—à—É–∫—É');
    }

    if (!Object.values(CODE_TECHNOLOGIES).some(tech => lowerQuery.includes(tech))) {
      recommendations.push('–í–∫–∞–∂—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—é –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤');
    }

    return recommendations;
  }
} 