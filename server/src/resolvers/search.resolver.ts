import { Query, Resolver, Arg, ObjectType, Field, Int } from "type-graphql";
import { HybridSearchService, HybridSearchOptions } from "../search/hybrid-search.service";
import { 
  GraphSearchStrategy, 
  TopicSearchStrategy, 
  ContextualSearchStrategy 
} from "../search/advanced-strategies";
import { CodeSearchService, CODE_TECHNOLOGIES, CodeTechnology as CodeTech } from "../search/code-search.service";
import { Document } from "../entities/document.entity";

@ObjectType()
export class SearchResultWithDetails {
  @Field(() => Document)
  document: Document;

  @Field()
  score: number;

  @Field()
  matchType: string;

  @Field({ nullable: true })
  matchDetails?: string; // JSON string –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π
}

@ObjectType()
export class HybridSearchResult {
  @Field(() => [SearchResultWithDetails])
  results: SearchResultWithDetails[];

  @Field(() => Int)
  totalFound: number;

  @Field()
  executionTimeMs: number;

  @Field(() => [String])
  strategiesUsed: string[];

  @Field({ nullable: true })
  recommendations?: string;
}

@ObjectType()
export class SearchStrategy {
  @Field()
  name: string;

  @Field()
  description: string;
}

@ObjectType()
export class SearchPerformance {
  @Field()
  totalStrategies: number;

  @Field()
  totalExecutionTimeMs: number;

  @Field()
  bestStrategy: string;

  @Field()
  recommendedApproach: string;
}

@ObjectType()
export class StrategyResult {
  @Field()
  strategyName: string;

  @Field(() => [SearchResultWithDetails])
  results: SearchResultWithDetails[];

  @Field(() => Int)
  resultCount: number;

  @Field()
  avgScore: number;

  @Field()
  executionTimeMs: number;
}

@ObjectType()
export class SearchComparison {
  @Field()
  query: string;

  @Field(() => [StrategyResult])
  strategyResults: StrategyResult[];

  @Field(() => SearchPerformance)
  overallPerformance: SearchPerformance;
}

@ObjectType()
export class SearchAnalytics {
  @Field(() => Int)
  totalSearches: number;

  @Field(() => [PopularQuery])
  popularQueries: PopularQuery[];

  @Field(() => [StrategyPerformance])
  strategyPerformance: StrategyPerformance[];
}

@ObjectType()
export class PopularQuery {
  @Field()
  query: string;

  @Field(() => Int)
  count: number;
}

@ObjectType()
export class StrategyPerformance {
  @Field()
  strategyName: string;

  @Field(() => Int)
  usage: number;

  @Field()
  avgScore: number;
}

@ObjectType()
export class CodeTechnologyInfo {
  @Field()
  value: string;

  @Field()
  label: string;

  @Field()
  description: string;
}

@ObjectType()
export class CodeSearchResult {
  @Field(() => [SearchResultWithDetails])
  results: SearchResultWithDetails[];

  @Field(() => Int)
  totalFound: number;

  @Field()
  executionTimeMs: number;

  @Field(() => [String])
  technologiesSearched: string[];

  @Field(() => [String])
  strategiesUsed: string[];

  @Field({ nullable: true })
  recommendations?: string;

  @Field({ nullable: true })
  warning?: string;

  @Field()
  isTechnical: boolean;

  @Field(() => [String], { nullable: true })
  suggestions?: string[];
}

@ObjectType()
export class QueryValidationResult {
  @Field()
  isTechnical: boolean;

  @Field({ nullable: true })
  warning?: string;

  @Field(() => [String], { nullable: true })
  suggestions?: string[];
}

@Resolver()
export class SearchResolver {
  private hybridSearchService = new HybridSearchService();
  private codeSearchService = new CodeSearchService();

  @Query(() => HybridSearchResult)
  async hybridSearch(
    @Arg("query") query: string,
    @Arg("strategies", () => [String], { nullable: true }) strategies?: string[],
    @Arg("technology", { nullable: true }) technology?: string,
    @Arg("type", { nullable: true }) type?: string,
    @Arg("ensembleMethod", { nullable: true }) ensembleMethod?: string,
    @Arg("limit", () => Int, { defaultValue: 10 }) limit?: number
  ): Promise<HybridSearchResult> {
    const startTime = Date.now();

    const options: HybridSearchOptions = {
      strategies: strategies || this.hybridSearchService.recommendStrategies(query),
      technology,
      type,
      limit,
      ensembleMethod: ensembleMethod as any || 'weighted_sum'
    };

    console.log(`üîç Hybrid search request: "${query}" with options:`, options);

    const results = await this.hybridSearchService.search(query, options);
    const executionTime = Date.now() - startTime;

    return {
      results: results.map(result => ({
        document: result.document,
        score: result.score,
        matchType: result.matchType,
        matchDetails: JSON.stringify(result.matchDetails)
      })),
      totalFound: results.length,
      executionTimeMs: executionTime,
      strategiesUsed: options.strategies || [],
      recommendations: this.generateRecommendations(query, results)
    };
  }

  @Query(() => HybridSearchResult)
  async searchWithStrategy(
    @Arg("query") query: string,
    @Arg("strategy") strategy: string,
    @Arg("technology", { nullable: true }) technology?: string,
    @Arg("type", { nullable: true }) type?: string,
    @Arg("limit", () => Int, { defaultValue: 10 }) limit?: number
  ): Promise<HybridSearchResult> {
    const startTime = Date.now();

    const results = await this.hybridSearchService.searchWithStrategy(strategy, query, {
      technology,
      type,
      limit
    });

    const executionTime = Date.now() - startTime;

    return {
      results: results.map(result => ({
        document: result.document,
        score: result.score,
        matchType: result.matchType,
        matchDetails: JSON.stringify(result.matchDetails)
      })),
      totalFound: results.length,
      executionTimeMs: executionTime,
      strategiesUsed: [strategy],
      recommendations: this.generateSingleStrategyRecommendations(strategy, results)
    };
  }

  @Query(() => SearchComparison)
  async compareSearchStrategies(
    @Arg("query") query: string,
    @Arg("technology", { nullable: true }) technology?: string,
    @Arg("type", { nullable: true }) type?: string,
    @Arg("limit", () => Int, { defaultValue: 5 }) limit?: number
  ): Promise<SearchComparison> {
    const startTime = Date.now();

    const comparison = await this.hybridSearchService.compareStrategies(query, {
      technology,
      type,
      limit
    });

    const strategyResults: StrategyResult[] = [];
    let bestStrategy = '';
    let bestScore = 0;

    for (const [strategyName, results] of Object.entries(comparison.results)) {
      const performance = comparison.performance[strategyName];
      
      strategyResults.push({
        strategyName,
        results: results.map(result => ({
          document: result.document,
          score: result.score,
          matchType: result.matchType,
          matchDetails: JSON.stringify(result.matchDetails)
        })),
        resultCount: performance.count,
        avgScore: performance.avgScore,
        executionTimeMs: performance.executionTime
      });

      if (performance.avgScore > bestScore) {
        bestScore = performance.avgScore;
        bestStrategy = strategyName;
      }
    }

    const totalExecutionTime = Date.now() - startTime;

    return {
      query,
      strategyResults,
      overallPerformance: {
        totalStrategies: strategyResults.length,
        totalExecutionTimeMs: totalExecutionTime,
        bestStrategy,
        recommendedApproach: this.getRecommendedApproach(query, comparison.performance)
      }
    };
  }

  @Query(() => [SearchStrategy])
  async getAvailableStrategies(): Promise<SearchStrategy[]> {
    const strategies = this.hybridSearchService.getAvailableStrategies();
    
    // –î–æ–¥–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
    const advancedStrategies = [
      new GraphSearchStrategy(),
      new TopicSearchStrategy(),
      new ContextualSearchStrategy()
    ];

    return [
      ...strategies,
      ...advancedStrategies.map(strategy => ({
        name: strategy.name,
        description: strategy.description
      }))
    ];
  }

  @Query(() => [String])
  async getRecommendedStrategies(
    @Arg("query") query: string
  ): Promise<string[]> {
    return this.hybridSearchService.recommendStrategies(query);
  }

  @Query(() => SearchAnalytics)
  async getSearchAnalytics(): Promise<SearchAnalytics> {
    const analytics = this.hybridSearchService.getAnalytics();

    const popularQueries = Object.entries(analytics.popularQueries)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 10)
      .map(([query, count]) => ({ query, count }));

    const strategyPerformance = Object.entries(analytics.strategyPerformance)
      .map(([strategyName, data]) => ({
        strategyName,
        usage: data.usage,
        avgScore: data.avgScore
      }));

    return {
      totalSearches: analytics.totalSearches,
      popularQueries,
      strategyPerformance
    };
  }

  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –∑–∞–ø–∏—Ç–∏
  @Query(() => HybridSearchResult)
  async semanticSearch(
    @Arg("query") query: string,
    @Arg("technology", { nullable: true }) technology?: string,
    @Arg("useGraph", { defaultValue: false }) useGraph?: boolean,
    @Arg("limit", () => Int, { defaultValue: 10 }) limit?: number
  ): Promise<HybridSearchResult> {
    const strategies = ['bm25', 'ngram'];
    
    if (useGraph) {
      strategies.push('graph');
    }

    return this.hybridSearch(query, strategies, technology, undefined, 'rank_fusion', limit);
  }

  @Query(() => HybridSearchResult)
  async troubleshootSearch(
    @Arg("query") query: string,
    @Arg("technology", { nullable: true }) technology?: string,
    @Arg("limit", () => Int, { defaultValue: 10 }) limit?: number
  ): Promise<HybridSearchResult> {
    // –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫ –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
    const strategies = ['rule_based', 'contextual', 'topic'];
    
    return this.hybridSearch(
      query, 
      strategies, 
      technology, 
      'issue', // –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞—Ö
      'vote', 
      limit
    );
  }

  @Query(() => HybridSearchResult)
  async learningSearch(
    @Arg("query") query: string,
    @Arg("technology", { nullable: true }) technology?: string,
    @Arg("limit", () => Int, { defaultValue: 10 }) limit?: number
  ): Promise<HybridSearchResult> {
    // –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è
    const strategies = ['contextual', 'topic', 'fulltext'];
    
    return this.hybridSearch(
      query, 
      strategies, 
      technology, 
      'documentation', // –§–æ–∫—É—Å –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
      'weighted_sum', 
      limit
    );
  }

  // –ù–û–í–Ü –ú–ï–¢–û–î–ò –î–õ–Ø –ü–û–®–£–ö–£ –ü–û –ö–û–î–£

  @Query(() => CodeSearchResult)
  async searchCode(
    @Arg("query") query: string,
    @Arg("technologies", () => [String], { nullable: true }) technologies?: string[],
    @Arg("codeType", { nullable: true }) codeType?: string,
    @Arg("strategies", () => [String], { nullable: true }) strategies?: string[],
    @Arg("ensembleMethod", { nullable: true }) ensembleMethod?: string,
    @Arg("skipTechnicalValidation", { nullable: true, defaultValue: false }) skipTechnicalValidation?: boolean,
    @Arg("limit", () => Int, { defaultValue: 10 }) limit?: number
  ): Promise<CodeSearchResult> {
    const startTime = Date.now();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π
    const validTechnologies = technologies?.filter(tech => 
      Object.values(CODE_TECHNOLOGIES).includes(tech as CodeTech)
    ) as CodeTech[] || Object.values(CODE_TECHNOLOGIES);

    console.log(`üîç Code Search request: "${query}" for technologies: ${validTechnologies.join(', ')}`);

    const searchResult = await this.codeSearchService.searchCode(query, {
      technologies: validTechnologies,
      codeType: codeType as any,
      strategies,
      ensembleMethod: ensembleMethod as any,
      skipTechnicalValidation,
      limit
    });

    const executionTime = Date.now() - startTime;

    return {
      results: searchResult.results.map(result => ({
        document: result.document,
        score: result.score,
        matchType: result.matchType,
        matchDetails: JSON.stringify(result.matchDetails)
      })),
      totalFound: searchResult.results.length,
      executionTimeMs: executionTime,
      technologiesSearched: validTechnologies,
      strategiesUsed: strategies || this.codeSearchService.getCodeOptimizedStrategies(query),
      recommendations: this.codeSearchService.getCodeSearchRecommendations(query).join("; "),
      warning: searchResult.warning,
      isTechnical: searchResult.isTechnical,
      suggestions: searchResult.suggestions
    };
  }

  @Query(() => CodeSearchResult)
  async searchCodeDocumentation(
    @Arg("query") query: string,
    @Arg("technologies", () => [String], { nullable: true }) technologies?: string[],
    @Arg("limit", () => Int, { defaultValue: 10 }) limit?: number
  ): Promise<CodeSearchResult> {
    const startTime = Date.now();

    const validTechnologies = technologies?.filter(tech => 
      Object.values(CODE_TECHNOLOGIES).includes(tech as CodeTech)
    ) as CodeTech[] || Object.values(CODE_TECHNOLOGIES);

    const searchResult = await this.codeSearchService.searchCodeDocumentation(query, {
      technologies: validTechnologies,
      limit
    });

    const executionTime = Date.now() - startTime;

    return {
      results: searchResult.results.map(result => ({
        document: result.document,
        score: result.score,
        matchType: result.matchType,
        matchDetails: JSON.stringify(result.matchDetails)
      })),
      totalFound: searchResult.results.length,
      executionTimeMs: executionTime,
      technologiesSearched: validTechnologies,
      strategiesUsed: ['fulltext', 'bm25', 'rule_based'],
      recommendations: "–ü–æ—à—É–∫ –æ–±–º–µ–∂–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é –¥–ª—è –∫–æ–¥–æ–≤–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π",
      warning: searchResult.warning,
      isTechnical: searchResult.isTechnical,
      suggestions: searchResult.suggestions
    };
  }

  @Query(() => CodeSearchResult)
  async searchCodeIssues(
    @Arg("query") query: string,
    @Arg("technologies", () => [String], { nullable: true }) technologies?: string[],
    @Arg("limit", () => Int, { defaultValue: 10 }) limit?: number
  ): Promise<CodeSearchResult> {
    const startTime = Date.now();

    const validTechnologies = technologies?.filter(tech => 
      Object.values(CODE_TECHNOLOGIES).includes(tech as CodeTech)
    ) as CodeTech[] || Object.values(CODE_TECHNOLOGIES);

    const searchResult = await this.codeSearchService.searchCodeIssues(query, {
      technologies: validTechnologies,
      limit
    });

    const executionTime = Date.now() - startTime;

    return {
      results: searchResult.results.map(result => ({
        document: result.document,
        score: result.score,
        matchType: result.matchType,
        matchDetails: JSON.stringify(result.matchDetails)
      })),
      totalFound: searchResult.results.length,
      executionTimeMs: executionTime,
      technologiesSearched: validTechnologies,
      strategiesUsed: ['rule_based', 'fuzzy', 'ngram'],
      recommendations: "–ü–æ—à—É–∫ –æ–±–º–µ–∂–µ–Ω–∏–π issues/–ø—Ä–æ–±–ª–µ–º–∞–º–∏ –¥–ª—è –∫–æ–¥–æ–≤–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π",
      warning: searchResult.warning,
      isTechnical: searchResult.isTechnical,
      suggestions: searchResult.suggestions
    };
  }

  @Query(() => CodeSearchResult)
  async searchAPI(
    @Arg("query") query: string,
    @Arg("technologies", () => [String], { nullable: true }) technologies?: string[],
    @Arg("limit", () => Int, { defaultValue: 10 }) limit?: number
  ): Promise<CodeSearchResult> {
    const startTime = Date.now();

    const validTechnologies = technologies?.filter(tech => 
      Object.values(CODE_TECHNOLOGIES).includes(tech as CodeTech)
    ) as CodeTech[] || Object.values(CODE_TECHNOLOGIES);

    const searchResult = await this.codeSearchService.searchAPI(query, {
      technologies: validTechnologies,
      limit
    });

    const executionTime = Date.now() - startTime;

    return {
      results: searchResult.results.map(result => ({
        document: result.document,
        score: result.score,
        matchType: result.matchType,
        matchDetails: JSON.stringify(result.matchDetails)
      })),
      totalFound: searchResult.results.length,
      executionTimeMs: executionTime,
      technologiesSearched: validTechnologies,
      strategiesUsed: ['bm25', 'rule_based', 'lexical'],
      recommendations: "–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó",
      warning: searchResult.warning,
      isTechnical: searchResult.isTechnical,
      suggestions: searchResult.suggestions
    };
  }

  @Query(() => CodeSearchResult)
  async searchByTechnology(
    @Arg("technology") technology: string,
    @Arg("query") query: string,
    @Arg("codeType", { nullable: true }) codeType?: string,
    @Arg("limit", () => Int, { defaultValue: 10 }) limit?: number
  ): Promise<CodeSearchResult> {
    const startTime = Date.now();

    if (!Object.values(CODE_TECHNOLOGIES).includes(technology as CodeTech)) {
      throw new Error(`–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è: ${technology}. –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: ${Object.values(CODE_TECHNOLOGIES).join(', ')}`);
    }

    const searchResult = await this.codeSearchService.searchByTechnology(
      technology as CodeTech, 
      query, 
      { 
        codeType: codeType as any,
        limit 
      }
    );

    const executionTime = Date.now() - startTime;

    return {
      results: searchResult.results.map(result => ({
        document: result.document,
        score: result.score,
        matchType: result.matchType,
        matchDetails: JSON.stringify(result.matchDetails)
      })),
      totalFound: searchResult.results.length,
      executionTimeMs: executionTime,
      technologiesSearched: [technology],
      strategiesUsed: this.codeSearchService.getCodeOptimizedStrategies(query),
      recommendations: `–ü–æ—à—É–∫ –æ–±–º–µ–∂–µ–Ω–∏–π —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—î—é: ${technology}`,
      warning: searchResult.warning,
      isTechnical: searchResult.isTechnical,
      suggestions: searchResult.suggestions
    };
  }

  @Query(() => CodeSearchResult)
  async searchTroubleshooting(
    @Arg("query") query: string,
    @Arg("technologies", () => [String], { nullable: true }) technologies?: string[],
    @Arg("limit", () => Int, { defaultValue: 10 }) limit?: number
  ): Promise<CodeSearchResult> {
    const startTime = Date.now();

    const validTechnologies = technologies?.filter(tech => 
      Object.values(CODE_TECHNOLOGIES).includes(tech as CodeTech)
    ) as CodeTech[] || Object.values(CODE_TECHNOLOGIES);

    const searchResult = await this.codeSearchService.searchTroubleshooting(query, {
      technologies: validTechnologies,
      limit
    });

    const executionTime = Date.now() - startTime;

    return {
      results: searchResult.results.map(result => ({
        document: result.document,
        score: result.score,
        matchType: result.matchType,
        matchDetails: JSON.stringify(result.matchDetails)
      })),
      totalFound: searchResult.results.length,
      executionTimeMs: executionTime,
      technologiesSearched: validTechnologies,
      strategiesUsed: ['rule_based', 'fuzzy', 'bm25'],
      recommendations: "–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫ –¥–ª—è troubleshooting —ñ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º",
      warning: searchResult.warning,
      isTechnical: searchResult.isTechnical,
      suggestions: searchResult.suggestions
    };
  }

  @Query(() => [CodeTechnologyInfo])
  async getCodeTechnologies(): Promise<CodeTechnologyInfo[]> {
    return this.codeSearchService.getCodeTechnologies();
  }

  @Query(() => [String])
  async getCodeSearchRecommendations(
    @Arg("query") query: string
  ): Promise<string[]> {
    return this.codeSearchService.getCodeSearchRecommendations(query);
  }

  @Query(() => QueryValidationResult)
  async validateQuery(
    @Arg("query") query: string
  ): Promise<QueryValidationResult> {
    // –°–ø—Ä–æ—â–µ–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è - —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É
    if (query.trim().length < 2) {
      return {
        isTechnical: false,
        warning: '–ó–∞–ø–∏—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥—ñ—Ç—å –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π.',
        suggestions: ['–î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É']
      };
    }

    // –í—Å—ñ –∑–∞–ø–∏—Ç–∏ –≤–≤–∞–∂–∞—é—Ç—å—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ - –Ω–µ—Ö–∞–π AI –º–æ–¥–µ–ª—å –≤–∏—Ä—ñ—à—É—î
    return {
      isTechnical: true,
      warning: undefined,
      suggestions: undefined
    };
  }

  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
  private generateRecommendations(query: string, results: any[]): string {
    const recommendations: string[] = [];
    
    if (results.length === 0) {
      recommendations.push("–°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –º–µ–Ω—à —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏");
      recommendations.push("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ fuzzy search –¥–ª—è –Ω–µ—Ç–æ—á–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤");
    } else if (results.length < 3) {
      recommendations.push("–°–ø—Ä–æ–±—É–π—Ç–µ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç —Å–∏–Ω–æ–Ω—ñ–º–∞–º–∏");
      recommendations.push("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ graph search –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤");
    } else {
      recommendations.push("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–≥–ª—è–¥–∞—é—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏");
      if (query.length > 20) {
        recommendations.push("–î–ª—è –¥–æ–≤–≥–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è BM25 –∞–±–æ full-text search");
      }
    }

    return recommendations.join("; ");
  }

  private generateSingleStrategyRecommendations(strategy: string, results: any[]): string {
    const strategyTips: Record<string, string> = {
      'lexical': '–î–æ–±—Ä–µ –¥–ª—è —Ç–æ—á–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤',
      'fulltext': '–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ–º–æ–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤',
      'fuzzy': '–ö–æ—Ä–∏—Å–Ω–∏–π –∫–æ–ª–∏ –≤ –∑–∞–ø–∏—Ç—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ–º–∏–ª–∫–∏',
      'bm25': '–í—ñ–¥–º—ñ–Ω–Ω–∏–π –¥–ª—è —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ',
      'ngram': '–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –¥–ª—è —á–∞—Å—Ç–∫–æ–≤–∏—Ö –∑–±—ñ–≥—ñ–≤',
      'rule_based': '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤'
    };

    return strategyTips[strategy] || '–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –ø–æ—à—É–∫—É';
  }

  private getRecommendedApproach(query: string, performance: Record<string, any>): string {
    // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø—ñ–¥—Ö—ñ–¥
    const bestPerforming = Object.entries(performance)
      .sort(([, a], [, b]) => (b as any).avgScore - (a as any).avgScore)
      .slice(0, 2)
      .map(([name]) => name);

    if (query.length < 10) {
      return `–î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è: ${bestPerforming.join(' + fuzzy')}`;
    } else if (query.length > 30) {
      return `–î–ª—è –¥–æ–≤–≥–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è: fulltext + bm25`;
    } else {
      return `–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è: ${bestPerforming.join(' + ')}`;
    }
  }
} 