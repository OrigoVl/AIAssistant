# Base Types
type Query {
  searchDocuments(
    query: String!
    limit: Int = 10
    offset: Int = 0
    sortBy: String
  ): SearchResult!
  
  askAI(question: String!, technology: String!): QAAnswer!
  
  searchGitHubIssues(
    repo: String!
    query: String!
    limit: Int = 10
  ): [GitHubIssue!]!
  
  # Development Agent Queries
  getProjectTemplates(technology: String!, type: String!): [ProjectStructure!]!
  
  getDevelopmentTasks(
    technology: String
    status: String
  ): [DevelopmentTask!]!
  
  getTechnologyRecommendations(
    projectType: String!
    requirements: [String!]!
  ): [String!]!
}

type Mutation {
  analyzeImage(
    imageUrl: String!
    question: String!
    technology: String
  ): ImageAnalysis!
  
  # Development Agent Mutations
  generateCode(input: CodeGenerationInput!): CodeGenerationResult!
  
  reviewCode(input: CodeReviewInput!): CodeReviewResult!
  
  debugCode(input: DebuggingInput!): DebuggingResult!
}

# Input Types
input CodeGenerationInput {
  description: String!
  technology: String!
  language: String
  framework: String
  requirements: [String!]
  style: String
  includeTests: Boolean
  includeDocs: Boolean
}

input CodeReviewInput {
  code: String!
  language: String!
  context: String
  focusAreas: [String!]
}

input DebuggingInput {
  errorMessage: String!
  code: String!
  language: String!
  stackTrace: String
  environment: String
}

# Development Agent Types
type CodeGenerationResult {
  code: String!
  tests: [String!]
  documentation: [String!]
  explanation: String!
  suggestions: [String!]!
  thinking: String
  generatedAt: String!
}

type CodeReviewResult {
  score: Int!
  issues: [String!]!
  suggestions: [String!]!
  bestPractices: [String!]!
  summary: String!
  reviewedAt: String!
}

type DebuggingResult {
  rootCause: String!
  solutions: [String!]!
  fixedCode: String!
  preventionTips: [String!]!
  explanation: String!
  debuggedAt: String!
}

type ProjectStructure {
  name: String!
  type: String!
  files: [String!]!
  directories: [String!]!
  description: String!
}

type DevelopmentTask {
  id: String!
  title: String!
  description: String!
  priority: String!
  status: String!
  technology: String!
  estimatedTime: String!
  createdAt: String!
}

# Document Types
type Document {
  id: ID!
  title: String!
  content: String!
  source: String!
  type: String!
  technology: String!
  createdAt: String!
}

type SearchResult {
  items: [Document!]!
  total: Int!
}

type DocumentSearchResult {
  items: [Document!]!
  total: Int!
}

# AI Response Types
type QAAnswer {
  answer: String!
  sources: [SourceDocument!]!
  generatedAt: String!
  warning: String
  isTechnical: Boolean!
  suggestions: [String!]
}

type SourceDocument {
  content: String!
  source: String!
  score: Float!
}

# Image Analysis Types
type ImageAnalysis {
  answer: String!
  imageDescription: String!
  generatedAt: String!
  sources: [SourceDocument!]!
  extractedText: String
}

type ImageUploadResponse {
  success: Boolean!
  imageUrl: String!
  filename: String!
}

# GitHub Types
type GitHubIssue {
  id: ID!
  title: String!
  body: String!
  url: String!
  state: String!
  createdAt: String!
  updatedAt: String!
}
